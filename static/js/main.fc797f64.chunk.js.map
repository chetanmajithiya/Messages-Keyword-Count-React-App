{"version":3,"sources":["components/header.js","components/addMessageModel.js","components/messageCard.js","components/keywordsInput.js","helper/helperFunctions.js","components/resultTable.js","components/allWordsAnalysis.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","TopHeader","classes","className","AppBar","Toolbar","IconButton","edge","aria-label","Typography","variant","noWrap","InputBase","placeholder","input","inputProps","AddMessageModel","props","useState","open","setOpen","text","setText","handleClose","Button","startIcon","onClick","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","TextareaAutosize","rows","cols","value","onChange","e","target","DialogActions","handleAddMessage","autoFocus","MessageCard","Paper","elevation","style","marginTop","Grid","container","item","xs","Checkbox","checked","selected","event","handleSelectChange","index","handleDeleteMessage","fontSize","KeywordsInput","Autocomplete","multiple","options","defaultValue","keywords","newValue","setKeywords","freeSolo","renderTags","getTagProps","map","option","Chip","label","renderInput","params","TextField","splitAllWordsFromTextIntoArray","textArray","allWords","wordsArray","replace","split","countWordsFromArray","arr","word","filter","toLowerCase","length","ResultTable","results","setResults","useEffect","textList","messageList","data","push","resultList","keyword","count","TableContainer","component","Table","TableHead","TableRow","TableCell","align","TableBody","AllWordsAnalysis","uniqueList","i","ar","indexOf","initialMessage","App","setMessageList","val","newList","indexNum","Container","message","lg","md","sm","Divider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc797f64.chunk.js","sourcesContent":["import AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\nimport InputBase from '@material-ui/core/InputBase'\nimport { fade, makeStyles } from '@material-ui/core/styles'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport SearchIcon from '@material-ui/icons/Search'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: '12ch',\n      '&:focus': {\n        width: '20ch',\n      },\n    },\n  },\n}))\n\nexport const TopHeader = () => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            Messages Keywords Counts\n          </Typography>\n          <div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n            <InputBase\n              placeholder=\"Search…\"\n              classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput,\n              }}\n              inputProps={{ 'aria-label': 'search' }}\n            />\n          </div>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\n","import Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport { useState } from 'react'\nimport AddIcon from '@material-ui/icons/AddRounded'\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize'\n\nexport const AddMessageModel = (props) => {\n  const [open, setOpen] = useState(false)\n  const [text, setText] = useState('')\n\n  const handleClickOpen = () => {\n    setOpen(true)\n  }\n\n  const handleClose = () => {\n    setOpen(false)\n    setText('')\n  }\n\n  const addMessage = () => {\n    if (text !== '' && text !== ' ') {\n      props.handleAddMessage(text)\n    }\n\n    handleClose()\n  }\n\n  return (\n    <div>\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        startIcon={<AddIcon />}\n        onClick={handleClickOpen}\n      >\n        Add Message\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">Add Message</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            <TextareaAutosize\n              rows={7}\n              cols={40}\n              value={text}\n              onChange={(e) => setText(e.target.value)}\n            />\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={addMessage} color=\"primary\" autoFocus>\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n","import { Checkbox, Grid, IconButton, Paper } from '@material-ui/core'\nimport DeleteIcon from '@material-ui/icons/Delete'\n\nexport const MessageCard = (props) => {\n  const handleChange = (event) => {\n    props.handleSelectChange(event.target.checked, props.index)\n  }\n  return (\n    <Paper elevation={3} style={{ width: 300, marginTop: 15 }}>\n      <Grid container spacing={3}>\n        <Grid item xs={4}>\n          <Checkbox\n            checked={props.selected}\n            onChange={handleChange}\n            color=\"primary\"\n            inputProps={{ 'aria-label': 'secondary  checkbox' }}\n          />\n        </Grid>\n        <Grid item xs={4}>\n          <h4 style={{ marginTop: 10 }}>Message {props.index + 1}</h4>\n        </Grid>\n        <Grid item xs={4}>\n          <IconButton aria-label=\"delete\" onClick={() => props.handleDeleteMessage(props.index)}>\n            <DeleteIcon fontSize=\"small\" />\n          </IconButton>\n        </Grid>\n      </Grid>\n      <p style={{ marginTop: 0, padding: 10 }}>{props.text}</p>\n    </Paper>\n  )\n}\n","import Autocomplete from '@material-ui/lab/Autocomplete'\nimport { Chip, TextField } from '@material-ui/core'\n\nexport const KeywordsInput = (props) => {\n  return (\n    <>\n      <Autocomplete\n        multiple\n        id=\"tags-filled\"\n        options={[]}\n        defaultValue={[]}\n        value={props.keywords}\n        onChange={(event, newValue) => {\n          props.setKeywords(newValue)\n        }}\n        freeSolo\n        renderTags={(value, getTagProps) =>\n          value.map((option, index) => (\n            <Chip key={index} variant=\"outlined\" label={option} {...getTagProps({ index })} />\n          ))\n        }\n        renderInput={(params) => (\n          <TextField {...params} variant=\"outlined\" label=\"Keywords\" placeholder=\"Keywords\" />\n        )}\n      />\n      <p style={{ color: 'silver' }}>(Note: Enter Keyword and Hit Enter to get Result)</p>\n      <br />\n    </>\n  )\n}\n","export const splitAllWordsFromTextIntoArray = (textArray) => {\n  let allWords = []\n\n  textArray.map((text) => {\n    const str = text\n    // removing special character from string like abc's test#s\n    const removeSpecialChars = str.replace(/[^a-zA-Z ]/g, ' ')\n    // split string into array of words with space and multi spaces\n    const wordsArray = removeSpecialChars.split(/\\s+/)\n    allWords = [...allWords, ...wordsArray]\n    return true\n  })\n  return allWords\n}\n\nexport const countWordsFromArray = (arr, word) => {\n  const allMatch = arr.filter((text) => text.toLowerCase() === word.toLowerCase())\n  return allMatch.length\n}\n","import {\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from '@material-ui/core'\nimport { useEffect, useState } from 'react'\nimport { countWordsFromArray, splitAllWordsFromTextIntoArray } from '../helper/helperFunctions'\n\nexport const ResultTable = (props) => {\n  const [results, setResults] = useState([])\n\n  useEffect(() => {\n    const textList = []\n    props.messageList.map((data) => {\n      if (data.selected) {\n        textList.push(data.text)\n      }\n      return true\n    })\n\n    const wordsArray = splitAllWordsFromTextIntoArray(textList)\n\n    // getting result of each keyword\n    const resultList = []\n    props.keywords.map((keyword) => {\n      resultList.push({\n        keyword: keyword,\n        count: countWordsFromArray(wordsArray, keyword),\n      })\n      return true\n    })\n    // set final result\n    setResults(resultList)\n  }, [props.keywords, props.messageList])\n  return (\n    <>\n      <TableContainer style={{ width: 300 }} component={Paper}>\n        <Table aria-label=\"table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Keyword</TableCell>\n              <TableCell align=\"right\">Counts</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {results.map((keyword, index) => (\n              <TableRow key={index}>\n                <TableCell align=\"left\">{keyword.keyword}</TableCell>\n                <TableCell align=\"right\">\n                  <span style={{ color: '#2ebf6d' }}>{keyword.count}</span>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <br />\n    </>\n  )\n}\n","import {\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from '@material-ui/core'\nimport { useEffect, useState } from 'react'\nimport { countWordsFromArray, splitAllWordsFromTextIntoArray } from '../helper/helperFunctions'\n\nexport const AllWordsAnalysis = (props) => {\n  const [results, setResults] = useState([])\n\n  useEffect(() => {\n    const textList = []\n    props.messageList.map((data) => {\n      if (data.selected) {\n        textList.push(data.text)\n      }\n      return true\n    })\n\n    const wordsArray = splitAllWordsFromTextIntoArray(textList)\n    // getting unique array word list\n    const uniqueList = wordsArray.filter((item, i, ar) => ar.indexOf(item) === i)\n\n    // getting result of each keyword\n    const resultList = []\n    uniqueList.map((keyword) => {\n      resultList.push({\n        keyword: keyword,\n        count: countWordsFromArray(wordsArray, keyword),\n      })\n      return true\n    })\n    // set final result\n    setResults(resultList)\n  }, [props.keywords, props.messageList])\n\n  return (\n    <>\n      <h1>Each Words Analysis from Messages</h1>\n      <TableContainer style={{ width: 300 }} component={Paper}>\n        <Table aria-label=\"table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Word</TableCell>\n              <TableCell align=\"right\">Counts</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {results.map((keyword, index) => (\n              <TableRow key={index}>\n                <TableCell align=\"left\">{keyword.keyword}</TableCell>\n                <TableCell align=\"right\">\n                  <span style={{ color: '#2ebf6d' }}>{keyword.count}</span>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <br />\n    </>\n  )\n}\n","import { Container, Grid } from '@material-ui/core'\nimport { TopHeader } from './components/header'\nimport { useState } from 'react'\nimport Divider from '@material-ui/core/Divider'\nimport { AddMessageModel } from './components/addMessageModel'\nimport { MessageCard } from './components/messageCard'\nimport { KeywordsInput } from './components/keywordsInput'\nimport { ResultTable } from './components/resultTable'\nimport { AllWordsAnalysis } from './components/allWordsAnalysis'\n\nconst initialMessage = {\n  text:\n    'Lorem Ipsum is simply dummy, text of, the printing and typesetting industry hello hi my text',\n  selected: true,\n}\n\nconst App = () => {\n  const [messageList, setMessageList] = useState([initialMessage])\n  const [keywords, setKeywords] = useState([])\n\n  const handleSelectChange = (val, index) => {\n    const newList = [...messageList]\n    newList[index].selected = val\n    setMessageList(newList)\n  }\n\n  const handleDeleteMessage = (indexNum) => {\n    const newList = messageList.filter((data, index) => index !== indexNum)\n    setMessageList(newList)\n  }\n\n  const handleAddMessage = (text) => {\n    setMessageList([\n      ...messageList,\n      {\n        text: text,\n        selected: true,\n      },\n    ])\n  }\n\n  return (\n    <div>\n      <TopHeader />\n      <Container>\n        <div style={{ marginTop: 20 }}>\n          <AddMessageModel handleAddMessage={handleAddMessage} />\n          <br />\n          <Grid container spacing={0}>\n            {messageList.map((message, index) => (\n              <Grid key={index} item lg={4} md={4} sm={12}>\n                <MessageCard\n                  text={message.text}\n                  index={index}\n                  selected={message.selected}\n                  handleSelectChange={handleSelectChange}\n                  handleDeleteMessage={handleDeleteMessage}\n                />\n              </Grid>\n            ))}\n          </Grid>\n          <Divider /> <br />\n          <KeywordsInput keywords={keywords} setKeywords={setKeywords} />\n          <ResultTable keywords={keywords} messageList={messageList} />\n          <Divider /> <br />\n          <AllWordsAnalysis keywords={keywords} messageList={messageList} />\n        </div>\n      </Container>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}